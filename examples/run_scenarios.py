"""
Scripts para executar cen√°rios espec√≠ficos de teste do Sistema APS

Cen√°rios inclu√≠dos:
1. Per√≠odo de adapta√ß√£o (14 dias)
2. Desafio de refei√ß√£o grande
3. Falha de sensor
4. Exerc√≠cio simulado
5. An√°lise de desempenho comparativa
"""

import asyncio
import sys
import os
from datetime import datetime, timedelta

# Adicionar src ao path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))

from main import APSSystem

async def run_adaptation_scenario():
    """
    Cen√°rio: Per√≠odo de adapta√ß√£o de 14 dias
    
    Simula per√≠odo inicial onde o sistema aprende padr√µes do paciente
    e gradualmente aumenta autonomia do controle.
    """
    print("üîÑ CEN√ÅRIO: Per√≠odo de Adapta√ß√£o (14 dias)")
    print("=" * 50)
    
    # Inicializar sistema
    aps = APSSystem('config.yaml')
    
    # Acelerar tempo para simular 14 dias em ~30 minutos reais
    acceleration_factor = 50
    
    print(f"Acelera√ß√£o temporal: {acceleration_factor}x")
    print("Simulando 14 dias de adapta√ß√£o...")
    
    try:
        # Executar simula√ß√£o
        await aps.run_simulation(
            duration_hours=14 * 24,  # 14 dias
            acceleration=acceleration_factor
        )
        
        # Analisar evolu√ß√£o da confian√ßa
        controller_metrics = aps.controller.get_performance_metrics(hours=14*24)
        
        print("\nüìä RESULTADOS DA ADAPTA√á√ÉO:")
        print(f"Confian√ßa final: {controller_metrics.get('system_confidence', 0)*100:.1f}%")
        print(f"Modo final: {controller_metrics.get('current_mode', 'unknown')}")
        print(f"Decis√µes totais: {controller_metrics.get('total_decisions', 0)}")
        
        # M√©tricas de desempenho por per√≠odo
        print("\nüìà EVOLU√á√ÉO POR PER√çODO:")
        
        for day in [1, 3, 7, 14]:
            day_metrics = await aps.get_metrics(hours=24)  # √öltimas 24h
            if day_metrics:
                print(f"Dia {day}:")
                print(f"  TIR: {day_metrics.get('time_in_range', 0)*100:.1f}%")
                print(f"  Glicemia m√©dia: {day_metrics.get('avg_glucose', 0):.1f} mg/dL")
                print(f"  Hipoglicemias: {day_metrics.get('hypoglycemia_events', 0)}")
        
        # Exportar dados para an√°lise
        aps.controller.export_decision_history(f"adaptation_decisions_{datetime.now().strftime('%Y%m%d')}.csv")
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Simula√ß√£o interrompida pelo usu√°rio")
    finally:
        aps.stop()

async def run_meal_challenge_scenario():
    """
    Cen√°rio: Desafio de refei√ß√£o grande
    
    Testa capacidade do sistema de lidar com refei√ß√£o de 80g carboidratos
    com diferentes perfis de absor√ß√£o.
    """
    print("üçï CEN√ÅRIO: Desafio de Refei√ß√£o Grande")
    print("=" * 40)
    
    aps = APSSystem('config.yaml')
    
    try:
        # Iniciar sistema
        asyncio.create_task(aps.run_simulation(duration_hours=6, acceleration=5))
        await asyncio.sleep(2)  # Aguardar inicializa√ß√£o
        
        print("Sistema iniciado - aplicando desafios de refei√ß√£o...")
        
        # Sequ√™ncia de refei√ß√µes desafiadoras
        meal_challenges = [
            {'time': 0, 'carbs': 80, 'profile': 'fast', 'name': 'Pizza + Refrigerante'},
            {'time': 120, 'carbs': 45, 'profile': 'slow', 'name': 'Massa Integral'},
            {'time': 240, 'carbs': 30, 'profile': 'medium', 'name': 'Lanche da Tarde'}
        ]
        
        for challenge in meal_challenges:
            # Aguardar tempo da refei√ß√£o
            wait_time = challenge['time'] / 5  # Ajustar pela acelera√ß√£o
            await asyncio.sleep(wait_time * 60)  # Converter para segundos
            
            print(f"üçΩÔ∏è {challenge['name']}: {challenge['carbs']}g carb ({challenge['profile']})")
            
            aps.simulator.consume_meal(
                carbs=challenge['carbs'],
                absorption_profile=challenge['profile']
            )
            
            # Aguardar e verificar resposta
            await asyncio.sleep(30)  # 30 segundos reais
            current_glucose = aps.simulator.get_current_glucose()
            print(f"   Glicemia atual: {current_glucose:.1f} mg/dL")
        
        # Aguardar final da simula√ß√£o
        await asyncio.sleep(60)  # 1 minuto real
        
        # Analisar resultados
        final_metrics = await aps.get_metrics(hours=6)
        
        print("\nüìä RESULTADOS DO DESAFIO:")
        if final_metrics:
            print(f"TIR: {final_metrics.get('time_in_range', 0)*100:.1f}%")
            print(f"Pico m√°ximo: {max([r['value'] for r in aps.simulator.get_glucose_history()]):.1f} mg/dL")
            print(f"Hipoglicemias: {final_metrics.get('hypoglycemia_events', 0)}")
            print(f"Hiperglicemias: {final_metrics.get('hyperglycemia_events', 0)}")
        
    except Exception as e:
        print(f"Erro no cen√°rio: {e}")
    finally:
        aps.stop()

async def run_sensor_failure_scenario():
    """
    Cen√°rio: Falha de sensor
    
    Testa robustez do sistema quando sensor apresenta problemas.
    """
    print("üì° CEN√ÅRIO: Falha de Sensor")
    print("=" * 30)
    
    aps = APSSystem('config.yaml')
    
    try:
        # Iniciar simula√ß√£o
        asyncio.create_task(aps.run_simulation(duration_hours=4, acceleration=10))
        await asyncio.sleep(1)
        
        print("Sistema estabilizado - injetando falhas de sensor...")
        
        # Sequ√™ncia de falhas
        sensor_failures = [
            {'time': 30, 'type': 'spike', 'duration': 20, 'description': 'Spike repentino'},
            {'time': 60, 'type': 'drift', 'duration': 30, 'description': 'Deriva gradual'},
            {'time': 120, 'type': 'dropout', 'duration': 15, 'description': 'Perda de sinal'},
            {'time': 180, 'type': 'noise', 'duration': 25, 'description': 'Ru√≠do excessivo'}
        ]
        
        for failure in sensor_failures:
            # Aguardar momento da falha
            wait_minutes = failure['time'] / 10  # Ajustar pela acelera√ß√£o
            await asyncio.sleep(wait_minutes * 60)
            
            print(f"‚ö†Ô∏è {failure['description']} por {failure['duration']} min")
            
            # Injetar falha
            aps.simulator.inject_sensor_error(failure['type'], failure['duration'])
            
            # Monitorar resposta do sistema de seguran√ßa
            await asyncio.sleep(10)  # Aguardar resposta
            
            safety_metrics = aps.safety_monitor.get_safety_metrics(hours=1)
            if safety_metrics:
                emergency_rate = safety_metrics.get('emergency_rate', 0)
                if emergency_rate > 0:
                    print(f"   ‚úÖ Sistema detectou problema (taxa emerg√™ncia: {emergency_rate*100:.1f}%)")
                else:
                    print("   ‚ö†Ô∏è Sistema n√£o detectou problema")
        
        # Analisar recupera√ß√£o
        await asyncio.sleep(30)  # Aguardar estabiliza√ß√£o
        
        print("\nüìä AN√ÅLISE DA RECUPERA√á√ÉO:")
        final_safety = aps.safety_monitor.get_safety_metrics(hours=4)
        
        if final_safety:
            print(f"Alertas totais: {final_safety.get('total_safety_checks', 0)}")
            print(f"Taxa de avisos: {final_safety.get('warning_rate', 0)*100:.1f}%")
            print(f"Taxa cr√≠tica: {final_safety.get('critical_rate', 0)*100:.1f}%")
            print(f"Sistema em emerg√™ncia: {'Sim' if final_safety.get('emergency_mode_active') else 'N√£o'}")
        
    except Exception as e:
        print(f"Erro no cen√°rio: {e}")
    finally:
        aps.stop()

async def run_performance_comparison():
    """
    Cen√°rio: Compara√ß√£o de desempenho PID vs H√≠brido
    
    Executa duas simula√ß√µes id√™nticas comparando controlador
    PID puro vs h√≠brido PID+ML.
    """
    print("‚öîÔ∏è CEN√ÅRIO: PID vs H√≠brido - Compara√ß√£o")
    print("=" * 45)
    
    # Configurar cen√°rio reproduz√≠vel
    np.random.seed(42)  # Para reprodutibilidade
    
    results = {}
    
    for controller_type in ['PID', 'H√≠brido']:
        print(f"\nüîÑ Testando controlador {controller_type}...")
        
        aps = APSSystem('config.yaml')
        
        # Configurar tipo de controlador
        if controller_type == 'PID':
            aps.controller.ml_weight = 0.0  # Desabilitar ML
        else:
            aps.controller.ml_weight = 0.3  # ML ativo
        
        try:
            # Simula√ß√£o de 48h com eventos padronizados
            asyncio.create_task(aps.run_simulation(duration_hours=48, acceleration=20))
            await asyncio.sleep(2)
            
            # Eventos de teste padronizados
            test_events = [
                {'time': 8, 'action': 'meal', 'params': {'carbs': 60, 'profile': 'medium'}},
                {'time': 12, 'action': 'meal', 'params': {'carbs': 45, 'profile': 'fast'}},
                {'time': 18, 'action': 'meal', 'params': {'carbs': 75, 'profile': 'slow'}},
                {'time': 32, 'action': 'meal', 'params': {'carbs': 50, 'profile': 'medium'}},
            ]
            
            for event in test_events:
                # Aguardar momento do evento
                wait_hours = event['time'] / 20  # Ajustar pela acelera√ß√£o
                await asyncio.sleep(wait_hours * 3600)
                
                if event['action'] == 'meal':
                    aps.simulator.consume_meal(**event['params'])
                    print(f"   üçΩÔ∏è Refei√ß√£o: {event['params']['carbs']}g carb")
            
            # Aguardar fim da simula√ß√£o
            await asyncio.sleep(120)  # 2 minutos
            
            # Coletar m√©tricas
            metrics = await aps.get_metrics(hours=48)
            controller_metrics = aps.controller.get_performance_metrics(hours=48)
            safety_metrics = aps.safety_monitor.get_safety_metrics(hours=48)
            
            results[controller_type] = {
                'tir': metrics.get('time_in_range', 0) * 100,
                'mean_glucose': metrics.get('avg_glucose', 0),
                'cv': metrics.get('coefficient_variation', 0),
                'hypo_events': metrics.get('hypoglycemia_events', 0),
                'hyper_events': metrics.get('hyperglycemia_events', 0),
                'controller_accuracy': controller_metrics.get('avg_pid_contribution', 0),
                'safety_warnings': safety_metrics.get('warning_rate', 0) * 100
            }
            
            print(f"   ‚úÖ TIR: {results[controller_type]['tir']:.1f}%")
            print(f"   ‚úÖ Hipoglicemias: {results[controller_type]['hypo_events']}")
            
        except Exception as e:
            print(f"   ‚ùå Erro: {e}")
            results[controller_type] = None
        finally:
            aps.stop()
            await asyncio.sleep(2)  # Pausa entre testes
    
    # Comparar resultados
    print("\nüìä COMPARA√á√ÉO DE RESULTADOS:")
    print("=" * 50)
    
    if results['PID'] and results['H√≠brido']:
        metrics_comparison = [
            ('TIR (%)', 'tir', '‚Üë'),
            ('Glicemia M√©dia', 'mean_glucose', '120'),
            ('CV (%)', 'cv', '‚Üì'),
            ('Hipoglicemias', 'hypo_events', '‚Üì'),
            ('Hiperglicemias', 'hyper_events', '‚Üì'),
            ('Avisos Seguran√ßa (%)', 'safety_warnings', '‚Üì')
        ]
        
        for metric_name, key, direction in metrics_comparison:
            pid_val = results['PID'][key]
            hybrid_val = results['H√≠brido'][key]
            
            if direction == '‚Üë':  # Maior √© melhor
                winner = 'H√≠brido' if hybrid_val > pid_val else 'PID'
                performance = '‚úÖ' if hybrid_val > pid_val else '‚ö†Ô∏è'
            elif direction == '‚Üì':  # Menor √© melhor
                winner = 'H√≠brido' if hybrid_val < pid_val else 'PID'
                performance = '‚úÖ' if hybrid_val < pid_val else '‚ö†Ô∏è'
            else:  # Pr√≥ximo ao alvo
                target = float(direction)
                pid_diff = abs(pid_val - target)
                hybrid_diff = abs(hybrid_val - target)
                winner = 'H√≠brido' if hybrid_diff < pid_diff else 'PID'
                performance = '‚úÖ' if hybrid_diff < pid_diff else '‚ö†Ô∏è'
            
            print(f"{metric_name:20} | PID: {pid_val:6.1f} | H√≠brido: {hybrid_val:6.1f} | {performance} {winner}")
        
        # Conclus√£o
        hybrid_wins = sum(1 for _, key, direction in metrics_comparison 
                         if (direction == '‚Üë' and results['H√≠brido'][key] > results['PID'][key]) or
                            (direction == '‚Üì' and results['H√≠brido'][key] < results['PID'][key]) or
                            (direction not in ['‚Üë', '‚Üì'] and abs(results['H√≠brido'][key] - float(direction)) < abs(results['PID'][key] - float(direction))))
        
        print(f"\nüèÜ RESULTADO: H√≠brido venceu em {hybrid_wins}/{len(metrics_comparison)} m√©tricas")
        
        if hybrid_wins >= len(metrics_comparison) // 2:
            print("‚úÖ Controlador h√≠brido demonstrou melhor desempenho geral")
        else:
            print("‚ö†Ô∏è PID puro ainda competitivo - ajustar par√¢metros ML")

# Fun√ß√£o principal para executar cen√°rios
async def main():
    """Fun√ß√£o principal para executar cen√°rios"""
    scenarios = {
        '1': ('Per√≠odo de Adapta√ß√£o (14 dias)', run_adaptation_scenario),
        '2': ('Desafio de Refei√ß√£o Grande', run_meal_challenge_scenario),
        '3': ('Falha de Sensor', run_sensor_failure_scenario),
        '4': ('Compara√ß√£o PID vs H√≠brido', run_performance_comparison)
    }
    
    print("üß™ CEN√ÅRIOS DE TESTE DISPON√çVEIS")
    print("=" * 40)
    
    for key, (name, _) in scenarios.items():
        print(f"{key}. {name}")
    
    print("0. Executar todos os cen√°rios")
    print()
    
    choice = input("Escolha um cen√°rio (0-4): ").strip()
    
    if choice == '0':
        print("üöÄ Executando todos os cen√°rios...")
        for _, (name, func) in scenarios.items():
            print(f"\n{'='*60}")
            await func()
            print(f"‚úÖ Cen√°rio '{name}' conclu√≠do")
            await asyncio.sleep(2)  # Pausa entre cen√°rios
    elif choice in scenarios:
        name, func = scenarios[choice]
        print(f"üöÄ Executando cen√°rio: {name}")
        await func()
        print(f"‚úÖ Cen√°rio conclu√≠do")
    else:
        print("‚ùå Op√ß√£o inv√°lida")

if __name__ == "__main__":
    import numpy as np
    
    # Avisos de seguran√ßa
    print("‚ö†Ô∏è" * 20)
    print("üö® SISTEMA EXPERIMENTAL - APENAS SIMULA√á√ÉO")
    print("‚ö†Ô∏è N√ÉO USAR EM PACIENTES REAIS")
    print("‚ö†Ô∏è" * 20)
    print()
    
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã Cen√°rios interrompidos pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå Erro nos cen√°rios: {e}")
        import traceback
        traceback.print_exc()